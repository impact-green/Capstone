import Kapsule from 'kapsule';

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var fitToBox = Kapsule({
  props: {
    bbox: {
      "default": {
        width: null,
        height: null
      }
    },
    passes: {
      "default": 3
    }
  },
  init: function init(el, state) {
    state.el = el;
  },
  update: function update(state) {
    _toConsumableArray(Array(state.passes).keys()).some(function () {
      var startSize = parseInt(state.el.style['font-size'].split('px')[0]) || 20;
      var bbox = state.el.getBBox();
      var newSize = Math.floor(startSize * Math.min(state.bbox.width / bbox.width, state.bbox.height / bbox.height));
      if (newSize === startSize) return true; // Shortcut out

      state.el.style['font-size'] = newSize + 'px';
    });
  }
});

var ellipsis = Kapsule({
  props: {
    maxWidth: {
      "default": Infinity
    }
  },
  init: function init(el, state) {
    state.el = el;
  },
  update: function update(state) {
    var origTxt = state.el.textContent;
    var nChars = Math.round(origTxt.length * state.maxWidth / state.el.getBBox().width * 1.2); // Start above

    while (--nChars && state.maxWidth / state.el.getBBox().width < 1) {
      state.el.textContent = abbreviateText(origTxt, nChars);
    } //


    function abbreviateText(txt, maxChars) {
      return txt.length <= maxChars ? txt : txt.substring(0, maxChars * 2 / 3) + '...' + txt.substring(txt.length - maxChars / 3, txt.length);
    }
  }
});

export { ellipsis, fitToBox };
